{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n// see https://tools.ietf.org/html/rfc1808\n(function (root) {\n  var URL_REGEX = /^(?=((?:[a-zA-Z0-9+\\-.]+:)?))\\1(?=((?:\\/\\/[^\\/?#]*)?))\\2(?=((?:(?:[^?#\\/]*\\/)*[^;?#\\/]*)?))\\3((?:;[^?#]*)?)(\\?[^#]*)?(#[^]*)?$/;\n  var FIRST_SEGMENT_REGEX = /^(?=([^\\/?#]*))\\1([^]*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n  var URLToolkit = {\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n      opts = opts || {}; // remove any remaining space and CRLF\n\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n\n        basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n\n      var baseParts = URLToolkit.parseURL(baseURL);\n\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment\n      };\n\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc; // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path; // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params; // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;\n      }\n\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function (url) {\n      var parts = URL_REGEX.exec(url);\n\n      if (!parts) {\n        return null;\n      }\n\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || ''\n      };\n    },\n    normalizePath: function (path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, ''); // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n\n      while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {}\n\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function (parts) {\n      return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;\n    }\n  };\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = URLToolkit;else if (typeof define === 'function' && define.amd) define([], function () {\n    return URLToolkit;\n  });else if (typeof exports === 'object') exports['URLToolkit'] = URLToolkit;else root['URLToolkit'] = URLToolkit;\n})(this);","map":{"version":3,"names":["root","URL_REGEX","FIRST_SEGMENT_REGEX","SLASH_DOT_REGEX","SLASH_DOT_DOT_REGEX","URLToolkit","buildAbsoluteURL","baseURL","relativeURL","opts","trim","alwaysNormalize","basePartsForNormalise","parseURL","Error","path","normalizePath","buildURLFromParts","relativeParts","scheme","baseParts","netLoc","pathParts","exec","builtParts","params","query","fragment","baseURLPath","newPath","substring","lastIndexOf","url","parts","split","reverse","join","replace","length","exports","module","define","amd"],"sources":["C:/office/xampp/htdocs/softtech_it_landing/node_modules/url-toolkit/src/url-toolkit.js"],"sourcesContent":["// see https://tools.ietf.org/html/rfc1808\n\n(function (root) {\n  var URL_REGEX =\n    /^(?=((?:[a-zA-Z0-9+\\-.]+:)?))\\1(?=((?:\\/\\/[^\\/?#]*)?))\\2(?=((?:(?:[^?#\\/]*\\/)*[^;?#\\/]*)?))\\3((?:;[^?#]*)?)(\\?[^#]*)?(#[^]*)?$/;\n  var FIRST_SEGMENT_REGEX = /^(?=([^\\/?#]*))\\1([^]*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n\n  var URLToolkit = {\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(\n          basePartsForNormalise.path\n        );\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment,\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath =\n              baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) +\n              relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize\n          ? URLToolkit.normalizePath(relativeParts.path)\n          : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function (url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || '',\n      };\n    },\n    normalizePath: function (path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (\n        path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length\n      ) {}\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function (parts) {\n      return (\n        parts.scheme +\n        parts.netLoc +\n        parts.path +\n        parts.params +\n        parts.query +\n        parts.fragment\n      );\n    },\n  };\n\n  if (typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if (typeof define === 'function' && define.amd)\n    define([], function () {\n      return URLToolkit;\n    });\n  else if (typeof exports === 'object') exports['URLToolkit'] = URLToolkit;\n  else root['URLToolkit'] = URLToolkit;\n})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}